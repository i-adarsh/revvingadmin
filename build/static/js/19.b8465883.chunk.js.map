{"version":3,"sources":["utils/helper.tsx","containers/SignIn/loginValidate.tsx","containers/SignIn/MobileOtpValidate.tsx","containers/SignIn/index.tsx"],"names":["validate","fields","validationRules","errors","isValid","forEach","obj","field","validations","i","length","rule","split","Validator","isEmpty","isNumeric","name","isEmail","numOfDigits","isLessOrGreater","isLength","min","Number","max","pwd","RegExp","test","equals","trim","loginValidate","otpValidate","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","background","boxShadow","border","borderRadius","btnWrapper","position","buttonProgress","color","blue","top","left","marginLeft","connect","state","loginData","login","data","sendSmsReducer","dispatch","history","useState","error","setError","loading","setLoading","isLogin","setLogin","username","password","otp","setState","eventClick","useRef","value","enqueueSnackbar","useSnackbar","useEffect","handleSnack","variant","message","status","current","push","classes","hancleChange","e","prevState","target","handleValidate","type","validRes","otpValidateRules","handleEnterKey","event","key","payload","Container","component","maxWidth","CssBaseline","Box","className","Avatar","Typography","noValidate","TextField","fullWidth","id","label","autoComplete","autoFocus","onChange","helperText","onKeyPress","align","style","cursor","onClick","handleResendOtp","Button","disabled","handleVerifyOtp","CircularProgress","size","handleLogin","Grid","container","item","xs","Link","href"],"mappings":"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","file":"static/js/19.b8465883.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/indent */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-continue */\nimport Validator from 'validator';\n\nexport const validate = (fields: any, validationRules: any) => {\n  const errors: any = {};\n  let isValid = true;\n  validationRules.forEach((obj: any) => {\n    const { field, validations } = obj;\n    for (let i = 0; i < validations.length; i++) {\n      const rule = validations[i].split(':');\n      switch (rule[0]) {\n        case 'numeric':\n          if (!Validator.isEmpty(`${fields[field]}`)) {\n            if (!Validator.isNumeric(`${fields[field]}`)) {\n              errors[field] = `${obj.name} must be numeric.`;\n              isValid = false;\n              continue;\n            }\n            // const num = new RegExp('^[1-9][0-9]*$');\n            // if (!num.test(`${fields[field]}`)) {\n            //   errors[field] = `${obj.name} must not start with Zero (0)`;\n            //   isValid = false;\n            //   continue;\n            // }\n          }\n          break;\n        case 'email':\n          if (!Validator.isEmpty(`${fields[field]}`) && !Validator.isEmail(`${fields[field]}`)) {\n            errors[field] = 'Please enter valid email address.';\n            isValid = false;\n            continue;\n          }\n          break;\n        case 'digit':\n          const numOfDigits = rule;\n          let isLessOrGreater = false;\n          if (rule.length === 3) {\n            isLessOrGreater = true;\n          }\n\n          if (\n            !Validator.isEmpty(`${fields[field]}`) &&\n            !Validator.isLength(`${fields[field]}`, {\n              min: isLessOrGreater ? Number(numOfDigits[1]) : Number(numOfDigits[1]),\n              max: isLessOrGreater ? Number(numOfDigits[2]) : Number(numOfDigits[1])\n            })\n          ) {\n            errors[field] = isLessOrGreater\n              ? `${obj.name} must be ${Number(numOfDigits[1])} - ${Number(\n                  // eslint-disable-next-line prettier/prettier\n                  numOfDigits[2]\n                )} characters`\n              : `${obj.name} must be ${Number(numOfDigits[1])} digits.`;\n            isValid = false;\n            continue;\n          }\n          break;\n        case 'password':\n          if (!Validator.isEmpty(`${fields[field]}`)) {\n            if (\n              !Validator.isLength(`${fields[field]}`, { min: 8 }) ||\n              !Validator.isLength(`${fields[field]}`, { max: 25 })\n            ) {\n              errors[field] = `${obj.name} must be atleast 8 characters.`;\n              isValid = false;\n              continue;\n            }\n            let pwd = new RegExp('^(?=.*[A-Z])');\n            if (!pwd.test(`${fields[field]}`)) {\n              errors[field] = `${obj.name} must contain one capital character`;\n              isValid = false;\n              continue;\n            }\n            pwd = new RegExp('^(?=.*[a-z])');\n            if (!pwd.test(`${fields[field]}`)) {\n              errors[field] = `${obj.name} must contain one small character`;\n              isValid = false;\n              continue;\n            }\n            pwd = new RegExp('^(?=.*[0-9])');\n            if (!pwd.test(`${fields[field]}`)) {\n              errors[field] = `${obj.name} must contain a digit`;\n              isValid = false;\n              continue;\n            }\n            pwd = new RegExp('^(?=.*[@$!%*#?&£=+^€])');\n            if (!pwd.test(`${fields[field]}`)) {\n              errors[field] = `${obj.name} must contain a special character`;\n              isValid = false;\n              continue;\n            }\n          }\n          break;\n        case 'confirm':\n          if (!Validator.equals(`${fields[field]}`, `${fields[`${field}Confirm`]}`)) {\n            errors[`${field}Confirm`] = `${obj.name} did not match`;\n            isValid = false;\n            continue;\n          }\n          break;\n        case 'required':\n        default:\n          if (Validator.isEmpty(`${fields[field]}`) || !`${fields[field]}`.trim()) {\n            errors[field] = `${obj.name} is required.`;\n            isValid = false;\n            continue;\n          }\n          break;\n      }\n    }\n  });\n\n  return { isValid, errors };\n};\n","const loginValidate = [\n  {\n    field: 'username',\n    validations: ['required'],\n    name: 'User name'\n  },\n  {\n    field: 'password',\n    validations: ['required'],\n    name: 'Password'\n  }\n];\n\nexport default loginValidate;\n","const otpValidate = [\n  {\n    field: 'otp',\n    validations: ['required'],\n    name: 'Otp'\n  }\n];\n\nexport default otpValidate;\n","import React, { useState, useEffect, KeyboardEvent, useRef } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { blue } from '@material-ui/core/colors';\nimport { useSnackbar, VariantType } from 'notistack';\nimport { connect } from 'react-redux';\nimport validationRules from './loginValidate';\nimport otpValidateRules from './MobileOtpValidate';\nimport { validate } from '../../utils/helper';\n\n// User form style theme object\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    background: '#fff',\n    boxShadow: 'none',\n    border: '1px solid #3c3c3c',\n    borderRadius: 4,\n    '&:hover': {\n      backgroundColor: '#fff',\n      boxShadow: 'none'\n    }\n  },\n  btnWrapper: {\n    position: 'relative'\n  },\n  buttonProgress: {\n    color: blue[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12\n  }\n}));\n\n// Props Interface\ninterface IProps {\n  dispatch: Function;\n  loginData: {\n    message: {\n      data?: string;\n    };\n    status: string;\n  };\n  sendSmsReducer: {\n    message: {\n      data?: string;\n    };\n    status: string;\n  };\n  history: {\n    push: Function;\n  };\n}\n\n// Error Interface\ninterface IError {\n  username?: string;\n  password?: string;\n  otp?: string;\n}\n\nconst SignIn: React.FC<IProps> = ({ dispatch, loginData, history, sendSmsReducer }: IProps) => {\n  const [error, setError] = useState<IError>({});\n  const [loading, setLoading] = useState(false);\n  const [isLogin, setLogin] = useState(false);\n  const [state, setState] = useState({\n    username: '',\n    password: '',\n    otp: ''\n  });\n  const eventClick = useRef({ value: '' });\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Handle updated data from send sms api\n  useEffect(() => {\n    const handleSnack = (variant: VariantType) => {\n      enqueueSnackbar(\n        sendSmsReducer.message.data ? sendSmsReducer.message.data : sendSmsReducer.message,\n        {\n          variant\n        }\n      );\n    };\n    const handleSuccess = (variant: VariantType, msg: string) => {\n      enqueueSnackbar(msg, {\n        variant\n      });\n    };\n    if (sendSmsReducer?.status === 'success') {\n      if (eventClick.current.value === 'send_sms') {\n        eventClick.current.value = '';\n        setLoading(false);\n        setLogin(true);\n      } else if (eventClick.current.value === 'resend-otp') {\n        handleSuccess('success', 'Login security code Sent');\n        eventClick.current.value = '';\n      }\n    }\n    if (sendSmsReducer?.status === 'failure') {\n      if (eventClick.current.value === 'send_sms') {\n        handleSnack('error');\n        eventClick.current.value = '';\n        setLoading(false);\n      } else if (eventClick.current.value === 'resend-otp') {\n        handleSnack('error');\n        eventClick.current.value = '';\n      }\n    }\n  }, [sendSmsReducer, history, enqueueSnackbar]);\n\n  // Handle updated data from send sms api\n  useEffect(() => {\n    const handleSnack = (variant: VariantType) => {\n      enqueueSnackbar(loginData.message.data ? loginData.message.data : loginData.message, {\n        variant\n      });\n    };\n    if (loginData?.status === 'success' && eventClick.current.value === 'verify_otp') {\n      history.push('/funding');\n      eventClick.current.value = '';\n      setLoading(false);\n    }\n    if (loginData?.status === 'failure' && eventClick.current.value === 'verify_otp') {\n      handleSnack('error');\n      eventClick.current.value = '';\n      setLoading(false);\n    }\n  }, [loginData, history, enqueueSnackbar]);\n\n  const classes = useStyles();\n\n  // Handle On Change\n  const hancleChange = (e: any) => {\n    setState((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  // Validation of user fields\n  const handleValidate = (type: string) => {\n    let validRes = { errors: {}, isValid: false };\n    if (type === 'login') {\n      validRes = validate(state, validationRules);\n      setError(validRes.errors);\n    } else {\n      validRes = validate(state, otpValidateRules);\n      setError(validRes.errors);\n    }\n    return validRes.isValid;\n  };\n\n  // Handle Enter key event\n  const handleEnterKey = (event: KeyboardEvent, type: string) => {\n    if (event.key === 'Enter') {\n      const { username, password, otp } = state;\n      if (handleValidate(type)) {\n        setLoading(true);\n        if (type === 'login') {\n          eventClick.current.value = 'send_sms';\n          if (type === 'login') {\n            username &&\n              password &&\n              dispatch({\n                type: 'SEND_SMS',\n                payload: {\n                  username,\n                  password\n                }\n              });\n          }\n        } else {\n          eventClick.current.value = 'verify_otp';\n          if (type === 'otp') {\n            username &&\n              password &&\n              otp &&\n              dispatch({\n                type: 'LOGIN_USER',\n                payload: {\n                  username,\n                  password,\n                  otp\n                }\n              });\n          }\n        }\n      }\n    }\n  };\n\n  // Handle Login submit button\n  const handleLogin = () => {\n    const { username, password } = state;\n    if (handleValidate('login')) {\n      eventClick.current.value = 'send_sms';\n      setLoading(true);\n      username &&\n        password &&\n        dispatch({\n          type: 'SEND_SMS',\n          payload: {\n            username,\n            password\n          }\n        });\n    }\n  };\n  // Handle Login submit button\n  const handleResendOtp = () => {\n    const { username, password } = state;\n    eventClick.current.value = 'resend-otp';\n    username &&\n      password &&\n      dispatch({\n        type: 'SEND_SMS',\n        payload: {\n          username,\n          password\n        }\n      });\n  };\n\n  // Handle verify otp submit button\n  const handleVerifyOtp = () => {\n    const { username, password, otp } = state;\n    if (handleValidate('otp')) {\n      eventClick.current.value = 'verify_otp';\n      setLoading(true);\n      username &&\n        password &&\n        otp &&\n        dispatch({\n          type: 'LOGIN_USER',\n          payload: {\n            username,\n            password,\n            otp\n          }\n        });\n    }\n  };\n\n  return (\n    <Container component='main' maxWidth='xs'>\n      <CssBaseline />\n      <Box className={classes.paper}>\n        {!isLogin ? (\n          <>\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component='h1' variant='h5'>\n              Sign in\n            </Typography>\n            <form className={classes.form} noValidate={false}>\n              <TextField\n                variant='outlined'\n                margin='normal'\n                fullWidth\n                id='user'\n                label='Username'\n                name='username'\n                autoComplete='username'\n                autoFocus\n                onChange={(e) => hancleChange(e)}\n                error={error.username ? true : false}\n                helperText={error.username ? error.username : ''}\n                onKeyPress={(e) => handleEnterKey(e, 'login')}\n              />\n              <TextField\n                variant='outlined'\n                margin='normal'\n                fullWidth\n                name='password'\n                label='Password'\n                type='password'\n                id='password'\n                autoComplete='current-password'\n                onChange={(e) => hancleChange(e)}\n                error={error.password ? true : false}\n                helperText={error.password ? error.password : ''}\n                onKeyPress={(e) => handleEnterKey(e, 'login')}\n              />\n              <Box className={classes.btnWrapper}>\n                <Button\n                  type='button'\n                  fullWidth\n                  variant='contained'\n                  color='primary'\n                  disabled={loading}\n                  className={classes.submit}\n                  onClick={() => handleLogin()}\n                >\n                  Sign In\n                </Button>\n                {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n              </Box>\n              <Grid container>\n                <Grid item xs>\n                  <Link href='#' variant='body2'>\n                    Forgot password?\n                  </Link>\n                </Grid>\n              </Grid>\n            </form>\n          </>\n        ) : (\n          <>\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component='h1' variant='h5'>\n              Login security code\n            </Typography>\n            <form className={classes.form} noValidate={false}>\n              <TextField\n                variant='outlined'\n                margin='normal'\n                fullWidth\n                id='user-otp'\n                label='Login security code'\n                name='otp'\n                autoComplete='otp'\n                autoFocus\n                value={state.otp}\n                onChange={(e) => hancleChange(e)}\n                error={error.otp ? true : false}\n                helperText={error.otp ? error.otp : ''}\n                onKeyPress={(e) => handleEnterKey(e, 'otp')}\n              />\n              <Typography\n                component='h6'\n                variant='body1'\n                align='right'\n                style={{ cursor: 'pointer' }}\n                onClick={() => handleResendOtp()}\n              >\n                Resend\n              </Typography>\n              <Box className={classes.btnWrapper}>\n                <Button\n                  type='button'\n                  fullWidth\n                  variant='contained'\n                  color='primary'\n                  disabled={loading}\n                  className={classes.submit}\n                  onClick={() => handleVerifyOtp()}\n                >\n                  Verify login security code\n                </Button>\n                {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n              </Box>\n            </form>\n          </>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state: any) => ({\n  loginData: state.login.data,\n  sendSmsReducer: state.sendSmsReducer.data\n});\n\nexport default connect(mapStateToProps)(SignIn);\n"],"sourceRoot":""}