{"version":3,"sources":["redux/reducers/index.tsx","redux/reducers/Funding/FundingArrowReducer/index.tsx","redux/reducers/Login/loginReducer/index.tsx","redux/reducers/Eligibility/BusinessTypeReducer/index.tsx","redux/reducers/Sms/SmsReducer/index.tsx","redux/reducers/Eligibility/SaveStepperReducer/index.tsx","redux/reducers/Eligibility/CustomerInfoReducer/index.tsx","redux/reducers/Eligibility/CreateCustomerReducer/index.tsx","redux/reducers/Eligibility/UpdateCustomerReducer/index.tsx","redux/reducers/Eligibility/BulkCreateRevenueReducer/index.tsx","redux/reducers/Eligibility/CurrentUserIdReducer/index.tsx","redux/reducers/Transactions/index.tsx","redux/reducers/Funding/GroupedRevenueReducer/index.tsx","redux/reducers/Funding/GroupedCurrencyReducer/index.tsx","redux/reducers/Funding/GroupTransTypeReducer/index.tsx","redux/reducers/Funding/GroupedTransWeekReducer/index.tsx","redux/reducers/RelatedCurrency/index.tsx","redux/reducers/ProfileAccounts/UserReducer/index.tsx","redux/reducers/ProfileAccounts/UserProfile/index.tsx","redux/reducers/Funding/LatestAdvances/index.tsx","redux/reducers/Account/FeeReducer/index.tsx","redux/reducers/ProfileAccounts/GetAccountPreferencesReducer/index.tsx","redux/reducers/ProfileAccounts/UpdateAccPreferencesReducer/index.tsx","redux/reducers/ProfileAccounts/Integrations/GetRevenueSourcesReducer/index.tsx","redux/reducers/ProfileAccounts/Integrations/AddRevenueSourceReducer/index.tsx","redux/reducers/ProfileAccounts/Integrations/UpdateRevenueSourceReducer/index.tsx","redux/reducers/ProfileAccounts/Integrations/DeleteRevenueSourceReducer/index.tsx","redux/reducers/ProfileAccounts/Business/UpdateBusinessReducer/index.tsx","redux/reducers/ProfileAccounts/Business/GetBusinessReducer/index.tsx","redux/reducers/Account/IntegrationsReducer/index.tsx","redux/reducers/AdvanceLedger/index.tsx","redux/reducers/ReportingAdvanceLedger/index.tsx","redux/reducers/InvoiceLedger/index.tsx","redux/reducers/PerformanceCollection/index.tsx","redux/reducers/Help/HelpReducer/index.tsx","redux/reducers/ReportingAdvanceLedger/RevenueSources/index.tsx","redux/reducers/Account/Administration/Team/Add.tsx","redux/reducers/Account/Administration/Team/Remove.tsx","redux/reducers/Documentation/index.tsx","redux/reducers/Account/Administration/Team/Get.tsx","redux/reducers/Account/Administration/Owner/Get.tsx","utils/responseHandler.tsx","redux/postApiCaller.tsx","redux/sagas/Login/loginSaga/index.tsx","redux/getApiCaller.tsx","redux/sagas/Eligibility/BusinessTypeSaga/index.tsx","redux/sagas/Eligibility/StepperSaga/index.tsx","redux/sagas/Eligibility/CurrentUserIdSaga/index.tsx","redux/sagas/Eligibility/CustomerInfoSaga/index.tsx","redux/sagas/Eligibility/CreateUserSaga/index.tsx","redux/sagas/Eligibility/UpdateCustomerInfoSaga/index.tsx","redux/sagas/Eligibility/BulkCreateRevenueSaga/index.tsx","redux/sagas/Sms/SendSmsSaga/index.tsx","redux/sagas/TransactionsSaga/index.tsx","redux/sagas/Funding/GroupedRevenueSourcesSaga/index.tsx","redux/sagas/Funding/GroupedCurrencySaga/index.tsx","redux/sagas/Funding/GroupedTransactionTypeSaga/index.tsx","redux/sagas/Funding/GroupedWeekSaga/index.tsx","redux/sagas/RelatedCurrencySaga/index.tsx","redux/sagas/ProfileAccounts/User/index.tsx","redux/sagas/ProfileAccounts/UserProfile/index.tsx","redux/sagas/Funding/LatestAdvances/index.tsx","redux/sagas/Account/FeeSaga/index.tsx","redux/sagas/ProfileAccounts/GetAccountPreferencesSaga/index.tsx","redux/sagas/ProfileAccounts/UpdateAccountPreferencesSaga/index.tsx","redux/sagas/ProfileAccounts/Integrations/GetRevenueSourcesSaga/index.tsx","redux/sagas/ProfileAccounts/Integrations/UpdateRevenueSourceSaga/index.tsx","redux/sagas/ProfileAccounts/Integrations/DeleteRevenueSourceSaga/index.tsx","redux/sagas/ProfileAccounts/Integrations/AddRevenueSourceSaga/index.tsx","redux/sagas/ProfileAccounts/Business/GetBusinessSaga/index.tsx","redux/sagas/ProfileAccounts/Business/UpdateBusinessSaga/index.tsx","redux/sagas/Account/Integrations/index.tsx","redux/sagas/AdvanceLedger/index.tsx","redux/sagas/ReportingAdvanceLedger/index.tsx","redux/sagas/InvoiceLedger/index.tsx","redux/sagas/PerformanceCollection/index.tsx","redux/sagas/Help/HelpSaga/index.tsx","redux/sagas/ReportingAdvanceLedger/RevenueSources/index.tsx","redux/sagas/Funding/FundingArrowSaga/index.tsx","redux/sagas/Account/Administration/Team/Add.tsx","redux/sagas/Account/Administration/Team/Get.tsx","redux/sagas/Account/Administration/Team/Remove.tsx","redux/sagas/Account/Administration/Owner/Update.tsx","redux/sagas/Documentation/index.tsx","redux/sagas/index.tsx","redux/store.tsx","hoc/withAuth.tsx","routes/index.tsx","reportWebVitals.ts","index.tsx","containers/Loading/Styled.tsx","containers/Loading/index.tsx"],"names":["appReducer","combineReducers","getgroupedarrowdata","state","data","action","type","changingStatus","payload","login","refresh","access","localStorage","setItem","businessType","sendSmsReducer","stepperReducer","businessValue","fundingValue","contactValue","backgroundValue","revenueValue","customerInfoReducer","createCustomerReducer","updateCustomerReducer","bulkCreateRevenueReducer","currentUserIdReducer","id","transactionLedgerReducer","groupedRevenueReducer","groupedCurrencyReducer","groupedTypeReducer","groupedTransWeekReducer","relatedCurrencyReducer","saveUserReducer","userProfileReducer","is_owner","default_currency","lastestAdvancesReducer","feeReducer","accountPreferencesReducer","updateAccPreferencesReducer","getRevenueSourceReducer","addRevenueSourceReducer","updateRevenueSourceReducer","deleteRevenueSourceReducer","updateBusinessReducer","getBusinessReducer","IntegrationsReducer","AdvanceLedgerReducer","ReportingAdvanceLedger","InvoiceLedger","PerformanceCollection","HelpReducer","RevenueSources","AddTeam","RemoveTeam","Documentation","GetTeam","GetOwner","rootReducer","undefined","checkStatus","response","status","json","then","errorData","message","error","TypeError","code","codeText","statusText","detail","parseJSON","contentType","headers","get","indexOf","URL","process","async","url","method","body","autherization","isFormData","Authorization","getItem","fetch","JSON","stringify","redirect","catch","API_DATA","postApiCaller","LOGIN_USER_SAGA","fetchUsers","takeLatest","put","call","bind","DATA","toString","authorization","getApiCaller","BUSINESS_STATS_SAGA","SAVE_STEPPER_SAGA","CURRENT_USER_ID_SAGA","SAVE_CUSTOMER_INFO_SAGA","CREATE_CUSTOMER_SAGA","userDetails","UPDATE_CUSTOMER_INFO_SAGA","BULK_CREATE_REVENUE_SAGA","SEND_SMS_SAGA","week","transactionType","currency","source","page","rowsPerPage","orderBy","getCsv","getExcel","getPdf","GET_TRANSACTION_LEDGER_SAGA","revenue","GET_GROUPED_REVENUE_SAGA","GET_GROUPED_CURRENCY_SAGA","GROUPED_TRANSACTION_TYPE_SAGA","GROUPED_WEEK_SAGA","GET_RELATED_CURRENCY_SAGA","SAVE_USER_DATA_SAGA","GET_USER_PROFILE_DATA_SAGA","GET_LATEST_ADVANCED_SAGA","GET_FEE_SAGA","GET_ACCOUNT_PREFERENCES_SAGA","email_notifications","emailNotifications","notify_advance_deposit","notifyAdvanceDeposit","notify_repayment","notifyRepayment","notify_fee_adjustments","notifyFeeAdjustments","notify_new_doc_created","notifyNewDocCreated","UPDATE_ACCOUNT_PREFERENCES_SAGA","GET_REVENUE_SOURCES_SAGA","name","UPDATE_REVENUE_SOURCE_SAGA","deleteApiCaller","DELETE_REVENUE_SOURCE_SAGA","ADD_REVENUE_SOURCE_SAGA","GET_BUSINESS_SAGA","reg_number","regNumber","address_one","addressOne","address_two","addressTwo","city","postcode","country","UPDATE_BUSINESS_SAGA","GET_MY_CUSTOMER_USER_SAGA","GET_ADVANCE_LEDGER_SAGA","revenue_source_name","GET_REPORTING_ADVANCE_LEDGER_SAGA","monthly_invoice_id","revenue_source","GET_INVOICE_LEDGER_SAGA","monthlyId","revSourceId","GET_PERFORMANCE_COLLECTION_SAGA","HELP_USER_SAGA","GET_ALL_REVENUE_SOURCES_SAGA","GET_GROUPED_ARROW_DATA_SAGA","GET_ADD_TEAM_SAGA","GET_TEAM_SAGA","GET_REMOVE_TEAM_SAGA","GET_UPDATE_OWNER_SAGA","documentationtype","GET_DOCUMENTATION_SAGA","rootSaga","all","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","ReducerContainer","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","SagaContainer","WithAuth","WrappedComponent","props","useState","isValidUser","setValidUser","history","useHistory","useEffect","push","Login","lazy","Landing","Eligibility","Homepage","Transactions","AdvanceLedger","Integrations","Fees","BusinessDetails","Administration","PageNotFound","Routes","isOwner","fallback","exact","path","component","requireAuth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","persistor","persistStore","theme","createMuiTheme","typography","fontFamily","join","ReactDOM","render","StrictMode","loading","maxSnack","ThemeProvider","CssBaseline","document","getElementById","MainContentBox","styled","Box","BoxWrap","Loading","head","className","Typography","variant"],"mappings":"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","file":"static/js/main.c1f15602.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport login from './Login/loginReducer';\nimport businessType from './Eligibility/BusinessTypeReducer';\nimport stepperReducer from './Eligibility/SaveStepperReducer';\nimport customerInfoReducer from './Eligibility/CustomerInfoReducer';\nimport createCustomerReducer from './Eligibility/CreateCustomerReducer';\nimport updateCustomerReducer from './Eligibility/UpdateCustomerReducer';\nimport bulkCreateRevenueReducer from './Eligibility/BulkCreateRevenueReducer';\nimport currentUserIdReducer from './Eligibility/CurrentUserIdReducer';\nimport sendSmsReducer from './Sms/SmsReducer';\nimport transactionLedgerReducer from './Transactions';\nimport groupedRevenueReducer from './Funding/GroupedRevenueReducer';\nimport groupedCurrencyReducer from './Funding/GroupedCurrencyReducer';\nimport groupedTypeReducer from './Funding/GroupTransTypeReducer';\nimport groupedTransWeekReducer from './Funding/GroupedTransWeekReducer';\nimport relatedCurrencyReducer from './RelatedCurrency';\nimport saveUserReducer from './ProfileAccounts/UserReducer';\nimport userProfileReducer from './ProfileAccounts/UserProfile';\nimport lastestAdvancesReducer from './Funding/LatestAdvances';\nimport feeReducer from './Account/FeeReducer';\n// import saveUserReducer from './Accounts/UserReducer';\n// import userProfileReducer from './Accounts/UserProfile';\nimport accountPreferencesReducer from './ProfileAccounts/GetAccountPreferencesReducer';\nimport updateAccPreferencesReducer from './ProfileAccounts/UpdateAccPreferencesReducer';\nimport getRevenueSourceReducer from './ProfileAccounts/Integrations/GetRevenueSourcesReducer';\nimport addRevenueSourceReducer from './ProfileAccounts/Integrations/AddRevenueSourceReducer';\nimport updateRevenueSourceReducer from './ProfileAccounts/Integrations/UpdateRevenueSourceReducer';\nimport deleteRevenueSourceReducer from './ProfileAccounts/Integrations/DeleteRevenueSourceReducer';\nimport getBusinessReducer from './ProfileAccounts/Business/GetBusinessReducer';\nimport updateBusinessReducer from './ProfileAccounts/Business/UpdateBusinessReducer';\nimport IntegrationsReducer from './Account/IntegrationsReducer';\nimport AdvanceLedgerReducer from './AdvanceLedger';\nimport ReportingAdvanceLedger from './ReportingAdvanceLedger';\nimport InvoiceLedger from './InvoiceLedger';\nimport PerformanceCollection from './PerformanceCollection';\nimport HelpReducer from './Help/HelpReducer';\nimport RevenueSources from './ReportingAdvanceLedger/RevenueSources';\nimport getgroupedarrowdata from './Funding/FundingArrowReducer';\nimport AddTeam from './Account/Administration/Team/Add';\nimport GetTeam from './Account/Administration/Team/Get';\nimport RemoveTeam from './Account/Administration/Team/Remove';\nimport GetOwner from './Account/Administration/Owner/Get';\n\nimport Documentation from './Documentation';\n\nconst appReducer = combineReducers({\n  getgroupedarrowdata,\n  login,\n  businessType,\n  sendSmsReducer,\n  stepperReducer,\n  customerInfoReducer,\n  createCustomerReducer,\n  updateCustomerReducer,\n  bulkCreateRevenueReducer,\n  currentUserIdReducer,\n  transactionLedgerReducer,\n  groupedRevenueReducer,\n  groupedCurrencyReducer,\n  groupedTypeReducer,\n  groupedTransWeekReducer,\n  relatedCurrencyReducer,\n  saveUserReducer,\n  userProfileReducer,\n  lastestAdvancesReducer,\n  feeReducer,\n  accountPreferencesReducer,\n  updateAccPreferencesReducer,\n  getRevenueSourceReducer,\n  addRevenueSourceReducer,\n  updateRevenueSourceReducer,\n  deleteRevenueSourceReducer,\n  updateBusinessReducer,\n  getBusinessReducer,\n  IntegrationsReducer,\n  AdvanceLedgerReducer,\n  ReportingAdvanceLedger,\n  InvoiceLedger,\n  PerformanceCollection,\n  HelpReducer,\n  RevenueSources,\n  AddTeam,\n  RemoveTeam,\n  Documentation,\n  GetTeam,\n  GetOwner\n});\n\nconst rootReducer = (state: any, action: any) => {\n  if (action.type === 'CLEAR_STATE') {\n    // eslint-disable-next-line no-param-reassign\n    state = undefined;\n  }\n\n  return appReducer(state, action);\n};\n\nexport default rootReducer;\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_GROUPED_ARROW_DATA_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_GROUPED_ARROW_DATA_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_GROUPED_ARROW_DATA_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_GROUPED_ARROW_DATA_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'LOGIN_USER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'LOGIN_USER_SUCCESS': {\n      const { refresh, access } = action.payload.data;\n      localStorage.setItem('CUSTOMER_TOKEN', access);\n      localStorage.setItem('REFRESH_TOKEN', refresh);\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'LOGIN_USER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'LOGIN_USER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'BUSINESS_STATS_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'BUSINESS_STATS_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'BUSINESS_STATS_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'BUSINESS_STATS_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'SEND_SMS_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'SEND_SMS_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'SEND_SMS_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'SEND_SMS_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: {\n      businessValue: null,\n      fundingValue: null,\n      contactValue: null,\n      backgroundValue: null,\n      revenueValue: null\n    }\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'SAVE_STEPPER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'SAVE_STEPPER_SUCCESS': {\n      const { businessValue, fundingValue, contactValue, backgroundValue, revenueValue } =\n        action.payload.data;\n\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: { businessValue, fundingValue, contactValue, backgroundValue, revenueValue }\n      };\n    }\n    case 'SAVE_STEPPER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'SAVE_STEPPER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'SAVE_CUSTOMER_INFO_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'SAVE_CUSTOMER_INFO_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'SAVE_CUSTOMER_INFO_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'SAVE_CUSTOMER_INFO_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'CREATE_CUSTOMER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'CREATE_CUSTOMER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'CREATE_CUSTOMER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'CREATE_CUSTOMER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'UPDATE_CUSTOMER_INFO_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'UPDATE_CUSTOMER_INFO_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'UPDATE_CUSTOMER_INFO_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'UPDATE_CUSTOMER_INFO_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'BULK_CREATE_REVENUE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'BULK_CREATE_REVENUE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'BULK_CREATE_REVENUE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'BULK_CREATE_REVENUE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: {\n      id: null\n    }\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'CURRENT_USER_ID_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'CURRENT_USER_ID_SUCCESS': {\n      const { id } = action.payload.data;\n\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: { id }\n      };\n    }\n    case 'CURRENT_USER_ID_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'CURRENT_USER_ID_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_TRANSACTION_LEDGER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_TRANSACTION_LEDGER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_TRANSACTION_LEDGER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_TRANSACTION_LEDGER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_GROUPED_REVENUE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_GROUPED_REVENUE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_GROUPED_REVENUE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_GROUPED_REVENUE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_GROUPED_CURRENCY_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_GROUPED_CURRENCY_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_GROUPED_CURRENCY_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_GROUPED_CURRENCY_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GROUPED_TRANSACTION_TYPE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GROUPED_TRANSACTION_TYPE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GROUPED_TRANSACTION_TYPE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GROUPED_TRANSACTION_TYPE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GROUPED_WEEK_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GROUPED_WEEK_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GROUPED_WEEK_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GROUPED_WEEK_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_RELATED_CURRENCY_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_RELATED_CURRENCY_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_RELATED_CURRENCY_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_RELATED_CURRENCY_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'SAVE_USER_DATA_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'SAVE_USER_DATA_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'SAVE_USER_DATA_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'SAVE_USER_DATA_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_USER_PROFILE_DATA_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_USER_PROFILE_DATA_SUCCESS': {\n      localStorage.setItem('owner', action?.payload?.data?.is_owner);\n      localStorage.setItem('default_currency', action?.payload?.data?.default_currency);\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_USER_PROFILE_DATA_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_USER_PROFILE_DATA_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_LATEST_ADVANCED_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_LATEST_ADVANCED_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_LATEST_ADVANCED_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_LATEST_ADVANCED_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_FEE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_FEE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_FEE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_FEE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_ACCOUNT_PREFERENCES_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_ACCOUNT_PREFERENCES_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_ACCOUNT_PREFERENCES_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_ACCOUNT_PREFERENCES_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'UPDATE_ACCOUNT_PREFERENCES_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'UPDATE_ACCOUNT_PREFERENCES_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'UPDATE_ACCOUNT_PREFERENCES_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'UPDATE_ACCOUNT_PREFERENCES_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_REVENUE_SOURCES_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_REVENUE_SOURCES_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_REVENUE_SOURCES_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_REVENUE_SOURCES_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'ADD_REVENUE_SOURCE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'ADD_REVENUE_SOURCE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'ADD_REVENUE_SOURCE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'ADD_REVENUE_SOURCE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'UPDATE_REVENUE_SOURCE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'UPDATE_REVENUE_SOURCE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'UPDATE_REVENUE_SOURCE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'UPDATE_REVENUE_SOURCE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'DELETE_REVENUE_SOURCE_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'DELETE_REVENUE_SOURCE_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'DELETE_REVENUE_SOURCE_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'DELETE_REVENUE_SOURCE_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'UPDATE_BUSINESS_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'UPDATE_BUSINESS_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'UPDATE_BUSINESS_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'UPDATE_BUSINESS_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_BUSINESS_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_BUSINESS_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_BUSINESS_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_BUSINESS_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_MY_CUSTOMER_USER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_MY_CUSTOMER_USER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_MY_CUSTOMER_USER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_MY_CUSTOMER_USER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_ADVANCE_LEDGER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_ADVANCE_LEDGER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_ADVANCE_LEDGER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_ADVANCE_LEDGER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_REPORTING_ADVANCE_LEDGER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_REPORTING_ADVANCE_LEDGER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_REPORTING_ADVANCE_LEDGER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_REPORTING_ADVANCE_LEDGER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_INVOICE_LEDGER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_INVOICE_LEDGER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_INVOICE_LEDGER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_INVOICE_LEDGER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_PERFORMANCE_COLLECTION_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_PERFORMANCE_COLLECTION_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_PERFORMANCE_COLLECTION_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_PERFORMANCE_COLLECTION_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'HELP_USER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'HELP_USER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'HELP_USER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'HELP_USER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_ALL_REVENUE_SOURCES_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_ALL_REVENUE_SOURCES_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_ALL_REVENUE_SOURCES_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_ALL_REVENUE_SOURCES_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_ADD_TEAM_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_ADD_TEAM_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_ADD_TEAM_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_ADD_TEAM_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_REMOVE_TEAM_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_REMOVE_TEAM_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_REMOVE_TEAM_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_REMOVE_TEAM_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_DOCUMENTATION_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_DOCUMENTATION_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_DOCUMENTATION_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_DOCUMENTATION_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_TEAM_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_TEAM_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_TEAM_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_TEAM_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export default function reducer(\n  state = {\n    data: null\n  },\n  action: any\n) {\n  switch (action.type) {\n    case 'GET_OWNER_STARTED': {\n      return { ...state, changingStatus: 'ongoing' };\n    }\n    case 'GET_OWNER_SUCCESS': {\n      return {\n        ...state,\n        changingStatus: 'success',\n        data: action.payload\n      };\n    }\n    case 'GET_OWNER_FAILED': {\n      return { ...state, changingStatus: 'failed', data: action.payload };\n    }\n    case 'GET_OWNER_NET_FAILED': {\n      return {\n        ...state,\n        changingStatus: 'netFailed',\n        data: action.payload\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","export const checkStatus = (response: any) => {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  if (response.status === 500) {\n    return response.json().then((errorData: any) => {\n      const message = (errorData || {}).error;\n      const error: any = new TypeError(message || 'Server error');\n      throw error;\n    });\n  }\n  if (response.status >= 400 && response.status < 500) {\n    return response.json().then((errorData: any) => {\n      const error: any = {\n        code: response.status,\n        codeText: response.status === 401 ? 'Unauthorised' : response.statusText,\n        data: errorData.detail ? errorData.detail : 'Something went wrong'\n      };\n      throw error;\n    });\n  }\n  return response.json().then((errorData: any) => {\n    const error: any = {\n      code: response.status,\n      data: errorData\n    };\n    throw error;\n  });\n};\n\nexport const parseJSON = (response: any) => {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    return response.json();\n  }\n  return null;\n};\n","import { checkStatus, parseJSON } from '../utils/responseHandler';\n\nconst URL = process.env.REACT_APP_BASE_URL;\n\n// Make an api call\nexport default function async(\n  url: any,\n  method = 'post',\n  body: any,\n  autherization: any,\n  isFormData: boolean\n) {\n  let headers = {};\n  if (autherization && !isFormData) {\n    headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('CUSTOMER_TOKEN')}`\n    };\n  } else if (autherization && isFormData) {\n    headers = {\n      Authorization: `Bearer ${localStorage.getItem('CUSTOMER_TOKEN')}`\n    };\n  } else {\n    headers = {\n      'Content-Type': 'application/json'\n    };\n  }\n  return fetch(`${URL}${url}`, {\n    method,\n    body: isFormData ? body : JSON.stringify(body),\n    headers,\n    redirect: 'follow'\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .catch((error) => {\n      throw error;\n    });\n}\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/token/', 'post', action.payload, false, false).then(\n    (response) => response\n  );\n\nconst that = this;\n\nexport const LOGIN_USER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('LOGIN_USER', function* (action) {\n    yield put({ type: 'LOGIN_USER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'LOGIN_USER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'LOGIN_USER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'LOGIN_USER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { checkStatus, parseJSON } from '../utils/responseHandler';\n\nconst URL = process.env.REACT_APP_BASE_URL;\n// Make an api call\nconst async = (url: string, method = 'get', authorization: boolean) => {\n  let headers = {};\n  if (authorization) {\n    headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('CUSTOMER_TOKEN')}`\n    };\n  } else {\n    headers = {\n      'Content-Type': 'application/json'\n    };\n  }\n  return fetch(`${URL}${url}`, {\n    method,\n    headers\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .catch((error) => {\n      throw error;\n    });\n};\nexport default async;\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  getApiCaller('accounts/AnswerOptions/', 'get', false).then((response) => response);\n\nconst that = this;\n\nexport const BUSINESS_STATS_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('BUSINESS_STATS', function* (action) {\n    yield put({ type: 'BUSINESS_STATS_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'BUSINESS_STATS_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'BUSINESS_STATS_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'BUSINESS_STATS_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest } from 'redux-saga/effects';\n\nexport const SAVE_STEPPER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('SAVE_STEPPER', function* (action: any) {\n    yield put({ type: 'SAVE_STEPPER_STARTED' });\n    try {\n      const DATA = action.payload;\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'SAVE_STEPPER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'SAVE_STEPPER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'SAVE_STEPPER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest } from 'redux-saga/effects';\n\nexport const CURRENT_USER_ID_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('CURRENT_USER_ID', function* (action: any) {\n    yield put({ type: 'CURRENT_USER_ID_STARTED' });\n    try {\n      const DATA = action.payload;\n      yield put({\n        type: 'CURRENT_USER_ID_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'CURRENT_USER_ID_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'CURRENT_USER_ID_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/CustomerUser/', 'post', action.payload, false, false).then(\n    (response) => response\n  );\n\nconst that = this;\n\nexport const SAVE_CUSTOMER_INFO_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('SAVE_CUSTOMER_INFO', function* (action) {\n    yield put({ type: 'SAVE_CUSTOMER_INFO_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'SAVE_CUSTOMER_INFO_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'SAVE_CUSTOMER_INFO_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'SAVE_CUSTOMER_INFO_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/create/', 'post', action.payload, false, false).then(\n    (response) => response\n  );\n\nconst that = this;\n\nexport const CREATE_CUSTOMER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('CREATE_CUSTOMER', function* (action) {\n    yield put({ type: 'CREATE_CUSTOMER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'CREATE_CUSTOMER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'CREATE_CUSTOMER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'CREATE_CUSTOMER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { userDetails, id } = action.payload;\n  const body = {\n    ...userDetails\n  };\n\n  return postApiCaller(`accounts/SaveCustomerData/${id}`, 'post', body, false, false).then(\n    (response) => response\n  );\n};\n\nconst that = this;\n\nexport const UPDATE_CUSTOMER_INFO_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('UPDATE_CUSTOMER_INFO', function* (action) {\n    yield put({ type: 'UPDATE_CUSTOMER_INFO_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'UPDATE_CUSTOMER_INFO_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'UPDATE_CUSTOMER_INFO_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'UPDATE_CUSTOMER_INFO_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller(\n    'accounts/CustomerRevenueSourceBulkCreate/',\n    'post',\n    action.payload,\n    false,\n    false\n  ).then((response) => response);\n\nconst that = this;\n\nexport const BULK_CREATE_REVENUE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('BULK_CREATE_REVENUE', function* (action) {\n    yield put({ type: 'BULK_CREATE_REVENUE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'BULK_CREATE_REVENUE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'BULK_CREATE_REVENUE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'BULK_CREATE_REVENUE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/Sendsms/', 'post', action.payload, false, false).then(\n    (response) => response\n  );\n\nconst that = this;\n\nexport const SEND_SMS_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('SEND_SMS', function* (action) {\n    yield put({ type: 'SEND_SMS_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'SEND_SMS_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'SEND_SMS_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'SEND_SMS_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const {\n    week = 'last_4_weeks',\n    transactionType = '',\n    currency = '',\n    source = '',\n    page = 1,\n    rowsPerPage = 10,\n    orderBy = 'created_at',\n    getCsv,\n    getExcel,\n    getPdf\n  } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedger/?currency=${currency}&transaction_type_multiple=repayment%2Csurplus_distribution%2Ccollection%2Cpurchase%2Cdepreciation&ordering=${orderBy}&week=${week}&transaction_type=${transactionType}&revenue_source_name=${source}&page=${page}&page_size=${rowsPerPage}&get_csv=${getCsv}&get_excel=${getExcel}&get_pdf=${getPdf}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_TRANSACTION_LEDGER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_TRANSACTION_LEDGER', function* (action) {\n    yield put({ type: 'GET_TRANSACTION_LEDGER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_TRANSACTION_LEDGER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_TRANSACTION_LEDGER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_TRANSACTION_LEDGER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { currency = '', week = '', revenue = '' } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedgerGroupedRevenueSource/?week=${week}&currency=${currency}&revenue_source_name=${revenue}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_GROUPED_REVENUE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_GROUPED_REVENUE', function* (action) {\n    yield put({ type: 'GET_GROUPED_REVENUE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_GROUPED_REVENUE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_GROUPED_REVENUE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_GROUPED_REVENUE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { currency = '', week = '', revenue = '' } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedgerGroupedCurrency/?week=${week}&currency=${currency}&revenue_source_name=${revenue}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_GROUPED_CURRENCY_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_GROUPED_CURRENCY', function* (action) {\n    yield put({ type: 'GET_GROUPED_CURRENCY_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_GROUPED_CURRENCY_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_GROUPED_CURRENCY_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_GROUPED_CURRENCY_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { currency = '', week = '', revenue = '' } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedgerGroupedTransactionType/?week=${week}&currency=${currency}&revenue_source_name=${revenue}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GROUPED_TRANSACTION_TYPE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GROUPED_TRANSACTION_TYPE', function* (action) {\n    yield put({ type: 'GROUPED_TRANSACTION_TYPE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GROUPED_TRANSACTION_TYPE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GROUPED_TRANSACTION_TYPE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GROUPED_TRANSACTION_TYPE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { currency = '', week = 'last_4_weeks', revenue = '' } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedgerGroupedWeek/?week=${week}&currency=${currency}&revenue_source_name=${revenue}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GROUPED_WEEK_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GROUPED_WEEK', function* (action) {\n    yield put({ type: 'GROUPED_WEEK_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GROUPED_WEEK_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GROUPED_WEEK_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GROUPED_WEEK_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n\n// const API_DATA = (action: any) =>\n//   getApiCaller('reporting/CustomerTransactionLedger/', 'get', true).then((response) => response);\n\nconst API_DATA = (action: any) => {\n  const { currency = '', page = 1, rowsPerPage = 1000, orderBy = 'created_at' } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedger/?currency=${currency}&ordering=${orderBy}&page=${page}&page_size=${rowsPerPage}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_RELATED_CURRENCY_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_RELATED_CURRENCY', function* (action) {\n    yield put({ type: 'GET_RELATED_CURRENCY_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_RELATED_CURRENCY_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_RELATED_CURRENCY_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_RELATED_CURRENCY_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/user/', 'PATCH', action.payload, true, false).then(\n    (response) => response\n  );\n\nconst that = this;\n\nexport const SAVE_USER_DATA_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('SAVE_USER_DATA', function* (action) {\n    yield put({ type: 'SAVE_USER_DATA_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'SAVE_USER_DATA_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'SAVE_USER_DATA_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'SAVE_USER_DATA_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  action.payload;\n  return getApiCaller('accounts/Profile/', 'get', true).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_USER_PROFILE_DATA_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_USER_PROFILE_DATA', function* (action) {\n    yield put({ type: 'GET_USER_PROFILE_DATA_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_USER_PROFILE_DATA_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_USER_PROFILE_DATA_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_USER_PROFILE_DATA_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  // const { currency = '', week = 'last_4_weeks', revenue = '' } = action.payload;\n  getApiCaller('reporting/LatestAdvances/', 'get', true).then((response) => response);\nconst that = this;\n\nexport const GET_LATEST_ADVANCED_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_LATEST_ADVANCED', function* (action) {\n    yield put({ type: 'GET_LATEST_ADVANCED_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_LATEST_ADVANCED_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_LATEST_ADVANCED_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_LATEST_ADVANCED_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  // const { currency = '', week = 'last_4_weeks', revenue = '' } = action.payload;\n  getApiCaller('reporting/CommercialTearms/', 'get', true).then((response) => response);\nconst that = this;\n\nexport const GET_FEE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_FEE', function* (action) {\n    yield put({ type: 'GET_FEE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_FEE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_FEE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_FEE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  getApiCaller('reporting/UserSettings/', 'get', true).then((response) => response);\n\nconst that = this;\n\nexport const GET_ACCOUNT_PREFERENCES_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_ACCOUNT_PREFERENCES', function* (action) {\n    yield put({ type: 'GET_ACCOUNT_PREFERENCES_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_ACCOUNT_PREFERENCES_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_ACCOUNT_PREFERENCES_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_ACCOUNT_PREFERENCES_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) => {\n  const {\n    emailNotifications,\n    notifyAdvanceDeposit,\n    notifyRepayment,\n    notifyFeeAdjustments,\n    notifyNewDocCreated\n  } = action.payload;\n  const body = {\n    email_notifications: emailNotifications,\n    notify_advance_deposit: notifyAdvanceDeposit,\n    notify_repayment: notifyRepayment,\n    notify_fee_adjustments: notifyFeeAdjustments,\n    notify_new_doc_created: notifyNewDocCreated\n  };\n\n  return postApiCaller('reporting/UserSettings/', 'PATCH', body, true, false).then(\n    (response) => response\n  );\n};\n\nconst that = this;\n\nexport const UPDATE_ACCOUNT_PREFERENCES_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('UPDATE_ACCOUNT_PREFERENCES', function* (action) {\n    yield put({ type: 'UPDATE_ACCOUNT_PREFERENCES_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'UPDATE_ACCOUNT_PREFERENCES_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'UPDATE_ACCOUNT_PREFERENCES_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'UPDATE_ACCOUNT_PREFERENCES_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  getApiCaller('accounts/CustomerRevenueSource/', 'get', true).then((response) => response);\n\nconst that = this;\n\nexport const GET_REVENUE_SOURCES_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_REVENUE_SOURCES', function* (action) {\n    yield put({ type: 'GET_REVENUE_SOURCES_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_REVENUE_SOURCES_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_REVENUE_SOURCES_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_REVENUE_SOURCES_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../../postApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { id, name, currency } = action.payload;\n  const body = {\n    name,\n    currency\n  };\n  return postApiCaller(`accounts/CustomerRevenueSource/${id}`, 'PATCH', body, true, false).then(\n    (response) => response\n  );\n};\n\nconst that = this;\n\nexport const UPDATE_REVENUE_SOURCE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('UPDATE_REVENUE_SOURCE', function* (action) {\n    yield put({ type: 'UPDATE_REVENUE_SOURCE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'UPDATE_REVENUE_SOURCE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'UPDATE_REVENUE_SOURCE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'UPDATE_REVENUE_SOURCE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport deleteApiCaller from '../../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { id } = action.payload;\n  return deleteApiCaller(`accounts/CustomerRevenueSource/${id}`, 'delete', true).then(\n    (response) => response\n  );\n};\n\nconst that = this;\n\nexport const DELETE_REVENUE_SOURCE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('DELETE_REVENUE_SOURCE', function* (action) {\n    yield put({ type: 'DELETE_REVENUE_SOURCE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'DELETE_REVENUE_SOURCE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'DELETE_REVENUE_SOURCE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'DELETE_REVENUE_SOURCE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/CustomerRevenueSource/', 'post', action.payload, true, false).then(\n    (response) => response\n  );\n\nconst that = this;\n\nexport const ADD_REVENUE_SOURCE_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('ADD_REVENUE_SOURCE', function* (action) {\n    yield put({ type: 'ADD_REVENUE_SOURCE_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'ADD_REVENUE_SOURCE_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'ADD_REVENUE_SOURCE_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'ADD_REVENUE_SOURCE_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  getApiCaller('accounts/MyCustomerUserapi/', 'get', true).then((response) => response);\n\nconst that = this;\n\nexport const GET_BUSINESS_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_BUSINESS', function* (action) {\n    yield put({ type: 'GET_BUSINESS_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_BUSINESS_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_BUSINESS_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_BUSINESS_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../../postApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { name, regNumber, addressOne, addressTwo, city, postcode, country } = action.payload;\n  const body = {\n    name,\n    reg_number: regNumber,\n    address_one: addressOne,\n    address_two: addressTwo,\n    city,\n    postcode,\n    country\n  };\n\n  return postApiCaller('accounts/MyCustomerUserapi/', 'PATCH', body, true, false).then(\n    (response) => response\n  );\n};\n\nconst that = this;\n\nexport const UPDATE_BUSINESS_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('UPDATE_BUSINESS', function* (action) {\n    yield put({ type: 'UPDATE_BUSINESS_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'UPDATE_BUSINESS_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'UPDATE_BUSINESS_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'UPDATE_BUSINESS_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) =>\n  getApiCaller('accounts/MyCustomerUserapi/', 'get', true).then((response) => response);\nconst that = this;\n\nexport const GET_MY_CUSTOMER_USER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_MY_CUSTOMER_USER', function* (action) {\n    yield put({ type: 'GET_MY_CUSTOMER_USER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_MY_CUSTOMER_USER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_MY_CUSTOMER_USER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_MY_CUSTOMER_USER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const {\n    week = 'last_4_weeks',\n    transactionType = '',\n    currency = '',\n    page = 1,\n    rowsPerPage = 1000,\n    orderBy = 'created_at',\n    getCsv,\n    getExcel,\n    getPdf\n  } = action.payload;\n  return getApiCaller(\n    `reporting/RevenueSourcePerformance/?currency=${currency}&ordering=${orderBy}&week=${week}&transactionType=${transactionType}&page=${page}&page_size=${rowsPerPage}&get_csv=${getCsv}&get_excel=${getExcel}&get_pdf=${getPdf}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_ADVANCE_LEDGER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_ADVANCE_LEDGER', function* (action) {\n    yield put({ type: 'GET_ADVANCE_LEDGER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_ADVANCE_LEDGER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_ADVANCE_LEDGER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_ADVANCE_LEDGER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n/*  eslint-disable */\nconst API_DATA = (action: any) => {\n  const {\n    revenue_source_name = '',\n    page = 1,\n    week,\n    status,\n    rowsPerPage = 10,\n    getCsv,\n    getPdf,\n    getExcel\n  } = action.payload;\n  return getApiCaller(`reporting/AdvanceLedger/?revenue_source_name=${revenue_source_name}&week=${week}&status=${status}&page=${page}&page_size=${rowsPerPage}&get_csv=${getCsv}&get_excel=${getExcel}&get_pdf=${getPdf}`, 'get', true).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_REPORTING_ADVANCE_LEDGER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_REPORTING_ADVANCE_LEDGER', function* (action) {\n    yield put({ type: 'GET_REPORTING_ADVANCE_LEDGER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_REPORTING_ADVANCE_LEDGER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_REPORTING_ADVANCE_LEDGER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_REPORTING_ADVANCE_LEDGER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const {\n    monthly_invoice_id,\n    rowsPerPage = 1000,\n    revenue_source,\n    currency = '',\n    getCsv,\n    getExcel,\n    getPdf\n  } = action.payload;\n  return getApiCaller(\n    `reporting/InvoiceLedger/?invoice__monthly_invoice__monthly_invoice_id=${monthly_invoice_id}&invoice__revenue_source__master__name=${revenue_source}&invoice__currency=${currency}&page_size=${rowsPerPage}&get_csv=${getCsv}&get_excel=${getExcel}&get_pdf=${getPdf}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_INVOICE_LEDGER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_INVOICE_LEDGER', function* (action) {\n    yield put({ type: 'GET_INVOICE_LEDGER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_INVOICE_LEDGER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_INVOICE_LEDGER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_INVOICE_LEDGER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const {\n    monthlyId,\n    currency = '',\n    rowsPerPage = 1000,\n    revSourceId,\n    getCsv,\n    getExcel,\n    getPdf\n  } = action.payload;\n  return getApiCaller(\n    `reporting/RevenueSourcePerformanceCollection/${monthlyId}/${revSourceId}/${currency}/?page_size=${rowsPerPage}&get_csv=${getCsv}&get_excel=${getExcel}&get_pdf=${getPdf}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_PERFORMANCE_COLLECTION_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_PERFORMANCE_COLLECTION', function* (action) {\n    yield put({ type: 'GET_PERFORMANCE_COLLECTION_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_PERFORMANCE_COLLECTION_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_PERFORMANCE_COLLECTION_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_PERFORMANCE_COLLECTION_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  postApiCaller('accounts/Help/', 'post', action.payload, true, false).then((response) => response);\n\nconst that = this;\n\nexport const HELP_USER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('HELP_USER', function* (action) {\n    yield put({ type: 'HELP_USER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'HELP_USER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'HELP_USER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'HELP_USER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n/*  eslint-disable */\nconst API_DATA = (action: any) => {\n  return getApiCaller('reporting/RevenueSources/', 'get', true).then((response : any) => response);\n};\n\nconst that = this;\n\nexport const GET_ALL_REVENUE_SOURCES_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_ALL_REVENUE_SOURCES', function* (action) {\n    yield put({ type: 'GET_ALL_REVENUE_SOURCES_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_ALL_REVENUE_SOURCES_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_ALL_REVENUE_SOURCES_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_ALL_REVENUE_SOURCES_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { currency = '', week = '' } = action.payload;\n  return getApiCaller(\n    `reporting/CustomerTransactionLedgerGroupedCurrencyDetailed/?currency=${currency}&week=${week}`,\n    'get',\n    true\n  ).then((response) => response);\n};\n\nconst that = this;\n\nexport const GET_GROUPED_ARROW_DATA_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_GROUPED_ARROW_DATA', function* (action) {\n    yield put({ type: 'GET_GROUPED_ARROW_DATA_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_GROUPED_ARROW_DATA_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_GROUPED_ARROW_DATA_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_GROUPED_ARROW_DATA_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  // const { currency = '', week = 'last_4_weeks', revenue = '' } = action.payload;\n  postApiCaller('accounts/Team/', 'post', action.payload, true, false).then((response) => response);\nconst that = this;\n\nexport const GET_ADD_TEAM_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_ADD_TEAM', function* (action) {\n    yield put({ type: 'GET_ADD_TEAM_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_ADD_TEAM_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_ADD_TEAM_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_ADD_TEAM_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { page = 1 } = action.payload;\n  return getApiCaller(`accounts/Team/?page=${page}`, 'get', true).then((response: any) => response);\n};\n\nconst that = this;\n\nexport const GET_TEAM_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_TEAM', function* (action) {\n    yield put({ type: 'GET_TEAM_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_TEAM_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_TEAM_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_TEAM_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  // const { currency = '', week = 'last_4_weeks', revenue = '' } = action.payload;\n  postApiCaller(`accounts/TeamEdit/${action.payload}`, 'DELETE', null, true, false).then(\n    (response) => response\n  );\nconst that = this;\n\nexport const GET_REMOVE_TEAM_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_REMOVE_TEAM', function* (action) {\n    yield put({ type: 'GET_REMOVE_TEAM_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_REMOVE_TEAM_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_REMOVE_TEAM_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_REMOVE_TEAM_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport postApiCaller from '../../../../postApiCaller';\n\nconst API_DATA = (action: any) =>\n  // const { currency = '', week = 'last_4_weeks', revenue = '' } = action.payload;\n  postApiCaller(`accounts/TeamEdit/${action.payload}`, 'PATCH', null, true, false).then(\n    (response) => response\n  );\nconst that = this;\n\nexport const GET_UPDATE_OWNER_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_UPDATE_OWNER', function* (action) {\n    yield put({ type: 'GET_UPDATE_OWNER_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_UPDATE_OWNER_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_UPDATE_OWNER_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_UPDATE_OWNER_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { put, takeLatest, call } from 'redux-saga/effects';\nimport getApiCaller from '../../getApiCaller';\n\nconst API_DATA = (action: any) => {\n  const { documentationtype = '', week = '', page = 1 } = action.payload;\n  return getApiCaller(\n    `reporting/Documentation/?documentation_type=${documentationtype}&week=${week}&page=${page}`,\n    'get',\n    true\n  ).then((response: any) => response);\n};\n\nconst that = this;\n\nexport const GET_DOCUMENTATION_SAGA = function* fetchUsers() {\n  // eslint-disable-next-line\n  yield takeLatest('GET_DOCUMENTATION', function* (action) {\n    yield put({ type: 'GET_DOCUMENTATION_STARTED' });\n    try {\n      const DATA: typeof API_DATA = yield call(API_DATA.bind(that, action));\n      // const DATA = yield call(API_DATA.bind(that, action));\n      yield put({\n        type: 'GET_DOCUMENTATION_SUCCESS',\n        payload: { status: 'success', data: DATA }\n      });\n    } catch (error) {\n      if (error.toString() === 'TypeError: Network request failed') {\n        yield put({\n          type: 'GET_DOCUMENTATION_NET_FAILED',\n          payload: { status: 'failure', message: error.toString() }\n        });\n      } else {\n        yield put({\n          type: 'GET_DOCUMENTATION_FAILED',\n          payload: { status: 'failure', message: error }\n        });\n      }\n    }\n  });\n};\n","import { all } from 'redux-saga/effects';\nimport { LOGIN_USER_SAGA } from './Login/loginSaga';\nimport { BUSINESS_STATS_SAGA } from './Eligibility/BusinessTypeSaga';\nimport { SAVE_STEPPER_SAGA } from './Eligibility/StepperSaga';\nimport { CURRENT_USER_ID_SAGA } from './Eligibility/CurrentUserIdSaga';\nimport { SAVE_CUSTOMER_INFO_SAGA } from './Eligibility/CustomerInfoSaga';\nimport { CREATE_CUSTOMER_SAGA } from './Eligibility/CreateUserSaga';\nimport { UPDATE_CUSTOMER_INFO_SAGA } from './Eligibility/UpdateCustomerInfoSaga';\nimport { BULK_CREATE_REVENUE_SAGA } from './Eligibility/BulkCreateRevenueSaga';\nimport { SEND_SMS_SAGA } from './Sms/SendSmsSaga';\nimport { GET_TRANSACTION_LEDGER_SAGA } from './TransactionsSaga';\nimport { GET_GROUPED_REVENUE_SAGA } from './Funding/GroupedRevenueSourcesSaga';\nimport { GET_GROUPED_CURRENCY_SAGA } from './Funding/GroupedCurrencySaga';\nimport { GROUPED_TRANSACTION_TYPE_SAGA } from './Funding/GroupedTransactionTypeSaga';\nimport { GROUPED_WEEK_SAGA } from './Funding/GroupedWeekSaga';\nimport { GET_RELATED_CURRENCY_SAGA } from './RelatedCurrencySaga';\nimport { SAVE_USER_DATA_SAGA } from './ProfileAccounts/User';\nimport { GET_USER_PROFILE_DATA_SAGA } from './ProfileAccounts/UserProfile';\nimport { GET_LATEST_ADVANCED_SAGA } from './Funding/LatestAdvances';\nimport { GET_FEE_SAGA } from './Account/FeeSaga';\n// import { SAVE_USER_DATA_SAGA } from './Accounts/User';\n// import { GET_USER_PROFILE_DATA_SAGA } from './Accounts/UserProfile';\nimport { GET_ACCOUNT_PREFERENCES_SAGA } from './ProfileAccounts/GetAccountPreferencesSaga';\nimport { UPDATE_ACCOUNT_PREFERENCES_SAGA } from './ProfileAccounts/UpdateAccountPreferencesSaga';\nimport { GET_REVENUE_SOURCES_SAGA } from './ProfileAccounts/Integrations/GetRevenueSourcesSaga';\nimport { UPDATE_REVENUE_SOURCE_SAGA } from './ProfileAccounts/Integrations/UpdateRevenueSourceSaga';\nimport { DELETE_REVENUE_SOURCE_SAGA } from './ProfileAccounts/Integrations/DeleteRevenueSourceSaga';\nimport { ADD_REVENUE_SOURCE_SAGA } from './ProfileAccounts/Integrations/AddRevenueSourceSaga';\nimport { GET_BUSINESS_SAGA } from './ProfileAccounts/Business/GetBusinessSaga';\nimport { UPDATE_BUSINESS_SAGA } from './ProfileAccounts/Business/UpdateBusinessSaga';\nimport { GET_MY_CUSTOMER_USER_SAGA } from './Account/Integrations';\nimport { GET_ADVANCE_LEDGER_SAGA } from './AdvanceLedger';\nimport { GET_REPORTING_ADVANCE_LEDGER_SAGA } from './ReportingAdvanceLedger';\nimport { GET_INVOICE_LEDGER_SAGA } from './InvoiceLedger';\nimport { GET_PERFORMANCE_COLLECTION_SAGA } from './PerformanceCollection';\nimport { HELP_USER_SAGA } from './Help/HelpSaga';\nimport { GET_ALL_REVENUE_SOURCES_SAGA } from './ReportingAdvanceLedger/RevenueSources';\nimport { GET_GROUPED_ARROW_DATA_SAGA } from './Funding/FundingArrowSaga';\nimport { GET_ADD_TEAM_SAGA } from './Account/Administration/Team/Add';\nimport { GET_TEAM_SAGA } from './Account/Administration/Team/Get';\nimport { GET_REMOVE_TEAM_SAGA } from './Account/Administration/Team/Remove';\nimport { GET_UPDATE_OWNER_SAGA } from './Account/Administration/Owner/Update';\nimport { GET_DOCUMENTATION_SAGA } from './Documentation';\n// Wrap all sagas in a container\nconst rootSaga = function* rootSaga() {\n  yield all([\n    SEND_SMS_SAGA(),\n    LOGIN_USER_SAGA(),\n    BUSINESS_STATS_SAGA(),\n    SAVE_STEPPER_SAGA(),\n    SAVE_CUSTOMER_INFO_SAGA(),\n    CREATE_CUSTOMER_SAGA(),\n    UPDATE_CUSTOMER_INFO_SAGA(),\n    BULK_CREATE_REVENUE_SAGA(),\n    CURRENT_USER_ID_SAGA(),\n    GET_TRANSACTION_LEDGER_SAGA(),\n    GET_GROUPED_REVENUE_SAGA(),\n    GET_GROUPED_CURRENCY_SAGA(),\n    GROUPED_TRANSACTION_TYPE_SAGA(),\n    GROUPED_WEEK_SAGA(),\n    GET_RELATED_CURRENCY_SAGA(),\n    SAVE_USER_DATA_SAGA(),\n    GET_USER_PROFILE_DATA_SAGA(),\n    GET_LATEST_ADVANCED_SAGA(),\n    GET_FEE_SAGA(),\n    GET_ACCOUNT_PREFERENCES_SAGA(),\n    UPDATE_ACCOUNT_PREFERENCES_SAGA(),\n    GET_REVENUE_SOURCES_SAGA(),\n    UPDATE_REVENUE_SOURCE_SAGA(),\n    DELETE_REVENUE_SOURCE_SAGA(),\n    ADD_REVENUE_SOURCE_SAGA(),\n    GET_BUSINESS_SAGA(),\n    UPDATE_BUSINESS_SAGA(),\n    GET_MY_CUSTOMER_USER_SAGA(),\n    GET_ADVANCE_LEDGER_SAGA(),\n    GET_REPORTING_ADVANCE_LEDGER_SAGA(),\n    GET_INVOICE_LEDGER_SAGA(),\n    GET_PERFORMANCE_COLLECTION_SAGA(),\n    HELP_USER_SAGA(),\n    GET_ALL_REVENUE_SOURCES_SAGA(),\n    GET_GROUPED_ARROW_DATA_SAGA(),\n    GET_ADD_TEAM_SAGA(),\n    GET_REMOVE_TEAM_SAGA(),\n    GET_UPDATE_OWNER_SAGA(),\n    GET_DOCUMENTATION_SAGA(),\n    GET_TEAM_SAGA()\n  ]);\n};\n\nexport default rootSaga;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport ReducerContainer from './reducers';\nimport SagaContainer from './sagas';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['login']\n};\n\nconst persistedReducer = persistReducer(persistConfig, ReducerContainer);\n\nconst middlewares = [];\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(persistedReducer, applyMiddleware(...middlewares, sagaMiddleware));\n\nsagaMiddleware.run(SagaContainer);\n\nexport default store;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst WithAuth = (WrappedComponent: any) => {\n  const Authenticate = (props: any) => {\n    const [isValidUser, setValidUser] = useState(false);\n    const history = useHistory();\n    useEffect(() => {\n      localStorage.getItem('CUSTOMER_TOKEN') ? setValidUser(true) : history.push('/login');\n    }, [history]);\n    return <div>{isValidUser ? <WrappedComponent {...props} /> : null}</div>;\n  };\n\n  return Authenticate;\n};\n\nexport default WithAuth;\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport requireAuth from '../hoc/withAuth';\nimport Loader from '../containers/Loading';\n\nconst Login = lazy(() => import('../containers/SignIn'));\nconst Landing = lazy(() => import('../containers/Landing'));\nconst Eligibility = lazy(() => import('../containers/Eligibility'));\nconst Homepage = lazy(() => import('../containers/Homepage'));\nconst Transactions = lazy(() => import('../containers/CustomerPortal/Transactions'));\nconst AdvanceLedger = lazy(() => import('../containers/CustomerPortal/AdvanceLedger'));\nconst Integrations = lazy(() => import('../containers/Account/Integrations'));\nconst Fees = lazy(() => import('../containers/Account/Fees'));\nconst Documentation = lazy(() => import('../containers/Account/Documentation'));\nconst BusinessDetails = lazy(() => import('../containers/Account/BusinessDetails'));\nconst Administration = lazy(() => import('../containers/Account/Administration'));\nconst PageNotFound = lazy(() => import('../containers/PageNotFound'));\n\nconst Routes = () => {\n  const isOwner = localStorage.getItem('owner');\n  return (\n    <Router>\n      <Suspense fallback={<Loader />}>\n        <Switch>\n          {/*  Public Route  */}\n          <Route exact path='/' component={Homepage} />\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/eligibility-check' component={Eligibility} />\n\n          {/*  Auth Route  */}\n          <Route exact path='/funding' component={requireAuth(Landing)} />\n          <Route exact path='/transactions' component={requireAuth(Transactions)} />\n          <Route exact path='/advance-ledger' component={requireAuth(AdvanceLedger)} />\n          <Route exact path='/account/integrations' component={requireAuth(Integrations)} />\n          <Route exact path='/account/fees' component={requireAuth(Fees)} />\n          <Route exact path='/account/documentation' component={requireAuth(Documentation)} />\n          <Route exact path='/account/business-details' component={requireAuth(BusinessDetails)} />\n          {isOwner === 'true' && (\n            <Route exact path='/account/administration' component={requireAuth(Administration)} />\n          )}\n          {/*  Page not found Route  */}\n          <Route path='*' component={PageNotFound} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-duplicates */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { SnackbarProvider } from 'notistack';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\nimport store from './redux/store';\nimport Routes from './routes';\nimport reportWebVitals from './reportWebVitals';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\n\nconst persistor = persistStore(store);\n\nconst theme = createMuiTheme({ typography: { fontFamily: ['AvertaDemo-Regular'].join(',') } });\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <SnackbarProvider maxSnack={3}>\n          <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Routes />\n          </ThemeProvider>\n        </SnackbarProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import styled from 'styled-components';\nimport { Box } from '@material-ui/core';\n\nexport const MainContentBox = styled(Box)`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  right: 0;\n  background: aliceblue;\n  z-index: 999;\n`;\n\nexport const BoxWrap = styled(Box)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 48%;\n  padding: 50px;\n  text-align: center;\n  background: #ffffff;\n  border-radius: 10px;\n\n  @media (max-width: 768px) {\n    width: 88%;\n  }\n`;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { MainContentBox, BoxWrap } from './Styled';\n\n// Props Interface\ninterface IProps {\n  head?: string;\n  body?: string;\n}\n\nconst Loading: React.FC<IProps> = ({ head, body }: IProps) => (\n  <>\n    <MainContentBox>\n      <BoxWrap>\n        <div className='loader' />\n        <Typography variant='h6'>{head ?? 'Loading...'}</Typography>\n        <Typography variant='body1'>{body ?? ''}</Typography>\n      </BoxWrap>\n    </MainContentBox>\n  </>\n);\n\nexport default Loading;\n"],"sourceRoot":""}